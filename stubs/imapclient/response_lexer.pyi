from typing import Any

class TokenSource:
    lex: Any = ...
    src: Any = ...
    def __init__(self, text: Any) -> None: ...
    @property
    def current_literal(self): ...
    def __iter__(self) -> Any: ...

class Lexer:
    sources: Any = ...
    current_source: Any = ...
    def __init__(self, text: Any) -> None: ...
    def read_until(self, stream_i: Any, end_char: Any, escape: bool = ...): ...
    def read_token_stream(self, stream_i: Any) -> None: ...
    def __iter__(self) -> Any: ...

class LiteralHandlingIter:
    src_text: Any = ...
    literal: Any = ...
    def __init__(self, resp_record: Any) -> None: ...
    def __iter__(self) -> Any: ...

class PushableIterator:
    NO_MORE: Any = ...
    it: Any = ...
    pushed: Any = ...
    def __init__(self, it: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    next: Any = ...
    def push(self, item: Any) -> None: ...
