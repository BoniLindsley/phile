from typing import Any, Optional
from watchdog.events import PatternMatchingEventHandler as PatternMatchingEventHandler
from watchdog.utils import echo as echo

class Trick(PatternMatchingEventHandler):
    @classmethod
    def generate_yaml(cls): ...

class LoggerTrick(Trick):
    def on_any_event(self, event: Any) -> None: ...
    def on_modified(self, event: Any) -> None: ...
    def on_deleted(self, event: Any) -> None: ...
    def on_created(self, event: Any) -> None: ...
    def on_moved(self, event: Any) -> None: ...

class ShellCommandTrick(Trick):
    shell_command: Any = ...
    wait_for_process: Any = ...
    drop_during_process: Any = ...
    process: Any = ...
    def __init__(self, shell_command: Optional[Any] = ..., patterns: Optional[Any] = ..., ignore_patterns: Optional[Any] = ..., ignore_directories: bool = ..., wait_for_process: bool = ..., drop_during_process: bool = ...) -> None: ...
    def on_any_event(self, event: Any) -> None: ...

class AutoRestartTrick(Trick):
    command: Any = ...
    stop_signal: Any = ...
    kill_after: Any = ...
    process: Any = ...
    def __init__(self, command: Any, patterns: Optional[Any] = ..., ignore_patterns: Optional[Any] = ..., ignore_directories: bool = ..., stop_signal: Any = ..., kill_after: int = ...) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def on_any_event(self, event: Any) -> None: ...
