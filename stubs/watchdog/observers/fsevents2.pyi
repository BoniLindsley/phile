# Standard libraries.
import threading as _threading
import typing as _typing

# Internal modules.
from .. import events as _watchdog_events
from . import api as _watchdog_observer_api


class FSEventsQueue(_threading.Thread):

    def __init__(self, path: _typing.Union[bytes, str]) -> None:
        ...

    def run(self) -> None:
        ...

    def stop(self) -> None:
        ...

    def read_events(self) -> _typing.Optional[list[NativeEvent]]:
        ...


class NativeEvent:
    path: str = ...
    flags: int = ...
    event_id: int = ...
    is_created: bool = ...
    is_removed: bool = ...
    is_renamed: bool = ...
    is_modified: bool = ...
    is_change_owner: bool = ...
    is_inode_meta_mod: bool = ...
    is_finder_info_mod: bool = ...
    is_xattr_mod: bool = ...
    is_symlink: bool = ...
    is_directory: bool = ...

    def __init__(self, path: str, flags: int, event_id: int) -> None:
        ...


class FSEventsEmitter(_watchdog_observer_api.EventEmitter):

    def __init__(
        self,
        event_queue: _watchdog_observer_api.EventQueue,
        watch: _watchdog_observer_api.ObservedWatch,
        timeout: float = ...,
    ) -> None:
        ...

    def on_thread_stop(self) -> None:
        ...

    def queue_events(self, timeout: float) -> None:
        ...


class FSEventsObserver2(_watchdog_observer_api.BaseObserver):

    def __init__(self, timeout: float = ...) -> None:
        ...
