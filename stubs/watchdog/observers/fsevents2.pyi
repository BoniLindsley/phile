from threading import Thread
from typing import Any
from watchdog.events import DirCreatedEvent as DirCreatedEvent, DirDeletedEvent as DirDeletedEvent, DirModifiedEvent as DirModifiedEvent, DirMovedEvent as DirMovedEvent, FileCreatedEvent as FileCreatedEvent, FileDeletedEvent as FileDeletedEvent, FileModifiedEvent as FileModifiedEvent, FileMovedEvent as FileMovedEvent
from watchdog.observers.api import BaseObserver as BaseObserver, DEFAULT_EMITTER_TIMEOUT as DEFAULT_EMITTER_TIMEOUT, DEFAULT_OBSERVER_TIMEOUT as DEFAULT_OBSERVER_TIMEOUT, EventEmitter as EventEmitter

logger: Any

class FSEventsQueue(Thread):
    def __init__(self, path: Any) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...
    def read_events(self): ...

class NativeEvent:
    path: Any = ...
    flags: Any = ...
    event_id: Any = ...
    is_created: Any = ...
    is_removed: Any = ...
    is_renamed: Any = ...
    is_modified: Any = ...
    is_change_owner: Any = ...
    is_inode_meta_mod: Any = ...
    is_finder_info_mod: Any = ...
    is_xattr_mod: Any = ...
    is_symlink: Any = ...
    is_directory: Any = ...
    def __init__(self, path: Any, flags: Any, event_id: Any) -> None: ...

class FSEventsEmitter(EventEmitter):
    def __init__(self, event_queue: Any, watch: Any, timeout: Any = ...) -> None: ...
    def on_thread_stop(self) -> None: ...
    def queue_events(self, timeout: Any) -> None: ...

class FSEventsObserver2(BaseObserver):
    def __init__(self, timeout: Any = ...) -> None: ...
