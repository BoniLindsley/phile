# Standard libraries.
import collections.abc as _collections_abc
import ctypes as _ctypes
import typing as _typing

libc: _ctypes.CDLL
inotify_add_watch: _collections_abc.Callable[[int, str, int], int]
inotify_rm_watch: _collections_abc.Callable[[int, int], int]
inotify_init: _collections_abc.Callable[[], int]


class InotifyConstants:
    IN_ACCESS: int = ...
    IN_MODIFY: int = ...
    IN_ATTRIB: int = ...
    IN_CLOSE_WRITE: int = ...
    IN_CLOSE_NOWRITE: int = ...
    IN_OPEN: int = ...
    IN_MOVED_FROM: int = ...
    IN_MOVED_TO: int = ...
    IN_CREATE: int = ...
    IN_DELETE: int = ...
    IN_DELETE_SELF: int = ...
    IN_MOVE_SELF: int = ...
    IN_CLOSE: int = ...
    IN_MOVE: int = ...
    IN_UNMOUNT: int = ...
    IN_Q_OVERFLOW: int = ...
    IN_IGNORED: int = ...
    IN_ONLYDIR: int = ...
    IN_DONT_FOLLOW: int = ...
    IN_EXCL_UNLINK: int = ...
    IN_MASK_ADD: int = ...
    IN_ISDIR: int = ...
    IN_ONESHOT: int = ...
    IN_ALL_EVENTS: int = ...
    IN_CLOEXEC: int = ...
    IN_NONBLOCK: int = ...


WATCHDOG_ALL_EVENTS: int


class inotify_event_struct(_ctypes.Structure):
    ...


EVENT_SIZE: int
DEFAULT_NUM_EVENTS: int
DEFAULT_EVENT_BUFFER_SIZE: int


class Inotify:

    def __init__(
        self,
        path: str,
        recursive: bool = ...,
        event_mask: int = ...
    ) -> None:
        ...

    @property
    def event_mask(self) -> int:
        ...

    @property
    def path(self) -> str:
        ...

    @property
    def is_recursive(self) -> bool:
        ...

    @property
    def fd(self) -> int:
        ...

    def clear_move_records(self) -> None:
        ...

    def source_for_move(
        self,
        destination_event: InotifyEvent,
    ) -> _typing.Optional[str]:
        ...

    def remember_move_from_event(self, event: InotifyEvent) -> None:
        ...

    def add_watch(self, path: str) -> None:
        ...

    def remove_watch(self, path: str) -> None:
        ...

    def close(self) -> None:
        ...

    def read_events(
        self,
        event_buffer_size: int = ...,
    ) -> list[InotifyEvent]:
        ...


class InotifyEvent:

    def __init__(
        self,
        wd: int,
        mask: int,
        cookie: int,
        name: str,
        src_path: str,
    ) -> None:
        ...

    @property
    def src_path(self) -> str:
        ...

    @property
    def wd(self) -> int:
        ...

    @property
    def mask(self) -> int:
        ...

    @property
    def cookie(self) -> int:
        ...

    @property
    def name(self) -> str:
        ...

    @property
    def is_modify(self) -> None:
        ...

    @property
    def is_close_write(self) -> None:
        ...

    @property
    def is_close_nowrite(self) -> None:
        ...

    @property
    def is_access(self) -> None:
        ...

    @property
    def is_delete(self) -> None:
        ...

    @property
    def is_delete_self(self) -> None:
        ...

    @property
    def is_create(self) -> None:
        ...

    @property
    def is_moved_from(self) -> None:
        ...

    @property
    def is_moved_to(self) -> None:
        ...

    @property
    def is_move(self) -> None:
        ...

    @property
    def is_move_self(self) -> None:
        ...

    @property
    def is_attrib(self) -> None:
        ...

    @property
    def is_ignored(self) -> None:
        ...

    @property
    def is_directory(self) -> None:
        ...

    @property
    def key(self) -> tuple[str, int, int, int, str]:
        ...

    def __eq__(self, inotify_event: _typing.Any) -> _typing.Any:
        ...

    def __ne__(self, inotify_event: _typing.Any) -> _typing.Any:
        ...

    def __hash__(self) -> _typing.Any:
        ...
